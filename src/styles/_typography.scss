@use 'sass:list';
@use 'sass:math';
@use "sass:map";

@use 'config/breakpoints';

$type-base: 16px;
$type-scale: 1.2;
$type-steps: 'sm', 'base', 'md', 'lg', 'xl', 'xxl', 'xxxl';
$type-base-index: list.index($type-steps, 'base');

$media-breakpoints: (
	xs: 0,
	sm: 576px,
	md: 768px,
	lg: 992px,
	xl: 1200px,
	xxl: 1400px
);

$default-min-bp: map.get($media-breakpoints, "xs");
$default-max-bp: map.get($media-breakpoints, "xxl");

@function rnd($number, $places: 0) {
	$n: 1;
	@if $places > 0 {
		@for $i from 1 through $places {
			$n: $n * 10;
		}
	}
	
	@return math.div(math.round($number * $n), $n);
}

@function clamped($min-px, $max-px, $min-bp: $default-min-bp, $max-bp: $default-max-bp) {
	$slope: math.div($max-px - $min-px, $max-bp - $min-bp);
	$slope-vw: rnd($slope * 100, 2);
	$intercept-rems: rnd(to-rems($min-px - $slope * $min-bp), 2);
	$min-rems: rnd(to-rems($min-px), 2);
	$max-rems: rnd(to-rems($max-px), 2);

	@return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
}

@function to-rems($px) {
	$rems: math.div($px, 16px) * 1rem;
	@return $rems;
}

@mixin responsive-type {
    @for $i from 1 through length($type-steps) {
		$step: list.nth($type-steps, $i);
		$min: $type-base * math.pow($type-scale, $i - $type-base-index);
		$max: $type-base * math.pow($type-scale, $i - $type-base-index + 1);

		--font-size-#{$step}: #{clamped($min, $max)};
	}
}